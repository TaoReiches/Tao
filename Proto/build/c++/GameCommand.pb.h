// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameCommand.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameCommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameCommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameCommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameCommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameCommand_2eproto;
namespace Game {
class TwGameCommand;
class TwGameCommandDefaultTypeInternal;
extern TwGameCommandDefaultTypeInternal _TwGameCommand_default_instance_;
class TwGameConnectionCS;
class TwGameConnectionCSDefaultTypeInternal;
extern TwGameConnectionCSDefaultTypeInternal _TwGameConnectionCS_default_instance_;
class TwGameConnectionSC;
class TwGameConnectionSCDefaultTypeInternal;
extern TwGameConnectionSCDefaultTypeInternal _TwGameConnectionSC_default_instance_;
class TwGameHeroMoveCS;
class TwGameHeroMoveCSDefaultTypeInternal;
extern TwGameHeroMoveCSDefaultTypeInternal _TwGameHeroMoveCS_default_instance_;
}  // namespace Game
PROTOBUF_NAMESPACE_OPEN
template<> ::Game::TwGameCommand* Arena::CreateMaybeMessage<::Game::TwGameCommand>(Arena*);
template<> ::Game::TwGameConnectionCS* Arena::CreateMaybeMessage<::Game::TwGameConnectionCS>(Arena*);
template<> ::Game::TwGameConnectionSC* Arena::CreateMaybeMessage<::Game::TwGameConnectionSC>(Arena*);
template<> ::Game::TwGameHeroMoveCS* Arena::CreateMaybeMessage<::Game::TwGameHeroMoveCS>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Game {

enum TwGameCommandType : int {
  SC_CONNECT = 1,
  CS_CONNECT = 2
};
bool TwGameCommandType_IsValid(int value);
constexpr TwGameCommandType TwGameCommandType_MIN = SC_CONNECT;
constexpr TwGameCommandType TwGameCommandType_MAX = CS_CONNECT;
constexpr int TwGameCommandType_ARRAYSIZE = TwGameCommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TwGameCommandType_descriptor();
template<typename T>
inline const std::string& TwGameCommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TwGameCommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TwGameCommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TwGameCommandType_descriptor(), enum_t_value);
}
inline bool TwGameCommandType_Parse(
    const std::string& name, TwGameCommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TwGameCommandType>(
    TwGameCommandType_descriptor(), name, value);
}
// ===================================================================

class TwGameCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Game.TwGameCommand) */ {
 public:
  TwGameCommand();
  virtual ~TwGameCommand();

  TwGameCommand(const TwGameCommand& from);
  TwGameCommand(TwGameCommand&& from) noexcept
    : TwGameCommand() {
    *this = ::std::move(from);
  }

  inline TwGameCommand& operator=(const TwGameCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwGameCommand& operator=(TwGameCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TwGameCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TwGameCommand* internal_default_instance() {
    return reinterpret_cast<const TwGameCommand*>(
               &_TwGameCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TwGameCommand& a, TwGameCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(TwGameCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TwGameCommand* New() const final {
    return CreateMaybeMessage<TwGameCommand>(nullptr);
  }

  TwGameCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TwGameCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TwGameCommand& from);
  void MergeFrom(const TwGameCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwGameCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Game.TwGameCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameCommand_2eproto);
    return ::descriptor_table_GameCommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kCommandTypeFieldNumber = 1,
  };
  // required bytes Content = 2;
  bool has_content() const;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // required .Game.TwGameCommandType CommandType = 1;
  bool has_commandtype() const;
  void clear_commandtype();
  ::Game::TwGameCommandType commandtype() const;
  void set_commandtype(::Game::TwGameCommandType value);

  // @@protoc_insertion_point(class_scope:Game.TwGameCommand)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  int commandtype_;
  friend struct ::TableStruct_GameCommand_2eproto;
};
// -------------------------------------------------------------------

class TwGameConnectionCS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Game.TwGameConnectionCS) */ {
 public:
  TwGameConnectionCS();
  virtual ~TwGameConnectionCS();

  TwGameConnectionCS(const TwGameConnectionCS& from);
  TwGameConnectionCS(TwGameConnectionCS&& from) noexcept
    : TwGameConnectionCS() {
    *this = ::std::move(from);
  }

  inline TwGameConnectionCS& operator=(const TwGameConnectionCS& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwGameConnectionCS& operator=(TwGameConnectionCS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TwGameConnectionCS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TwGameConnectionCS* internal_default_instance() {
    return reinterpret_cast<const TwGameConnectionCS*>(
               &_TwGameConnectionCS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TwGameConnectionCS& a, TwGameConnectionCS& b) {
    a.Swap(&b);
  }
  inline void Swap(TwGameConnectionCS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TwGameConnectionCS* New() const final {
    return CreateMaybeMessage<TwGameConnectionCS>(nullptr);
  }

  TwGameConnectionCS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TwGameConnectionCS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TwGameConnectionCS& from);
  void MergeFrom(const TwGameConnectionCS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwGameConnectionCS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Game.TwGameConnectionCS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameCommand_2eproto);
    return ::descriptor_table_GameCommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // required bytes Token = 1;
  bool has_token() const;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // @@protoc_insertion_point(class_scope:Game.TwGameConnectionCS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  friend struct ::TableStruct_GameCommand_2eproto;
};
// -------------------------------------------------------------------

class TwGameConnectionSC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Game.TwGameConnectionSC) */ {
 public:
  TwGameConnectionSC();
  virtual ~TwGameConnectionSC();

  TwGameConnectionSC(const TwGameConnectionSC& from);
  TwGameConnectionSC(TwGameConnectionSC&& from) noexcept
    : TwGameConnectionSC() {
    *this = ::std::move(from);
  }

  inline TwGameConnectionSC& operator=(const TwGameConnectionSC& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwGameConnectionSC& operator=(TwGameConnectionSC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TwGameConnectionSC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TwGameConnectionSC* internal_default_instance() {
    return reinterpret_cast<const TwGameConnectionSC*>(
               &_TwGameConnectionSC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TwGameConnectionSC& a, TwGameConnectionSC& b) {
    a.Swap(&b);
  }
  inline void Swap(TwGameConnectionSC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TwGameConnectionSC* New() const final {
    return CreateMaybeMessage<TwGameConnectionSC>(nullptr);
  }

  TwGameConnectionSC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TwGameConnectionSC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TwGameConnectionSC& from);
  void MergeFrom(const TwGameConnectionSC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwGameConnectionSC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Game.TwGameConnectionSC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameCommand_2eproto);
    return ::descriptor_table_GameCommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kMapIdFieldNumber = 2,
    kHeroTypeIdFieldNumber = 3,
  };
  // required uint64 UserId = 1;
  bool has_userid() const;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint32 MapId = 2;
  bool has_mapid() const;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 HeroTypeId = 3;
  bool has_herotypeid() const;
  void clear_herotypeid();
  ::PROTOBUF_NAMESPACE_ID::uint32 herotypeid() const;
  void set_herotypeid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.TwGameConnectionSC)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 herotypeid_;
  friend struct ::TableStruct_GameCommand_2eproto;
};
// -------------------------------------------------------------------

class TwGameHeroMoveCS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Game.TwGameHeroMoveCS) */ {
 public:
  TwGameHeroMoveCS();
  virtual ~TwGameHeroMoveCS();

  TwGameHeroMoveCS(const TwGameHeroMoveCS& from);
  TwGameHeroMoveCS(TwGameHeroMoveCS&& from) noexcept
    : TwGameHeroMoveCS() {
    *this = ::std::move(from);
  }

  inline TwGameHeroMoveCS& operator=(const TwGameHeroMoveCS& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwGameHeroMoveCS& operator=(TwGameHeroMoveCS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TwGameHeroMoveCS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TwGameHeroMoveCS* internal_default_instance() {
    return reinterpret_cast<const TwGameHeroMoveCS*>(
               &_TwGameHeroMoveCS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TwGameHeroMoveCS& a, TwGameHeroMoveCS& b) {
    a.Swap(&b);
  }
  inline void Swap(TwGameHeroMoveCS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TwGameHeroMoveCS* New() const final {
    return CreateMaybeMessage<TwGameHeroMoveCS>(nullptr);
  }

  TwGameHeroMoveCS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TwGameHeroMoveCS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TwGameHeroMoveCS& from);
  void MergeFrom(const TwGameHeroMoveCS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwGameHeroMoveCS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Game.TwGameHeroMoveCS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameCommand_2eproto);
    return ::descriptor_table_GameCommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kDirectionFieldNumber = 3,
  };
  // optional uint32 PosX = 1;
  bool has_posx() const;
  void clear_posx();
  ::PROTOBUF_NAMESPACE_ID::uint32 posx() const;
  void set_posx(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 PosY = 2;
  bool has_posy() const;
  void clear_posy();
  ::PROTOBUF_NAMESPACE_ID::uint32 posy() const;
  void set_posy(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional float Direction = 3;
  bool has_direction() const;
  void clear_direction();
  float direction() const;
  void set_direction(float value);

  // @@protoc_insertion_point(class_scope:Game.TwGameHeroMoveCS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 posx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 posy_;
  float direction_;
  friend struct ::TableStruct_GameCommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TwGameCommand

// required .Game.TwGameCommandType CommandType = 1;
inline bool TwGameCommand::has_commandtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TwGameCommand::clear_commandtype() {
  commandtype_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Game::TwGameCommandType TwGameCommand::commandtype() const {
  // @@protoc_insertion_point(field_get:Game.TwGameCommand.CommandType)
  return static_cast< ::Game::TwGameCommandType >(commandtype_);
}
inline void TwGameCommand::set_commandtype(::Game::TwGameCommandType value) {
  assert(::Game::TwGameCommandType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  commandtype_ = value;
  // @@protoc_insertion_point(field_set:Game.TwGameCommand.CommandType)
}

// required bytes Content = 2;
inline bool TwGameCommand::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TwGameCommand::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TwGameCommand::content() const {
  // @@protoc_insertion_point(field_get:Game.TwGameCommand.Content)
  return content_.GetNoArena();
}
inline void TwGameCommand::set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Game.TwGameCommand.Content)
}
inline void TwGameCommand::set_content(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Game.TwGameCommand.Content)
}
inline void TwGameCommand::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Game.TwGameCommand.Content)
}
inline void TwGameCommand::set_content(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Game.TwGameCommand.Content)
}
inline std::string* TwGameCommand::mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Game.TwGameCommand.Content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TwGameCommand::release_content() {
  // @@protoc_insertion_point(field_release:Game.TwGameCommand.Content)
  if (!has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TwGameCommand::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Game.TwGameCommand.Content)
}

// -------------------------------------------------------------------

// TwGameConnectionCS

// required bytes Token = 1;
inline bool TwGameConnectionCS::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TwGameConnectionCS::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TwGameConnectionCS::token() const {
  // @@protoc_insertion_point(field_get:Game.TwGameConnectionCS.Token)
  return token_.GetNoArena();
}
inline void TwGameConnectionCS::set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Game.TwGameConnectionCS.Token)
}
inline void TwGameConnectionCS::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Game.TwGameConnectionCS.Token)
}
inline void TwGameConnectionCS::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Game.TwGameConnectionCS.Token)
}
inline void TwGameConnectionCS::set_token(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Game.TwGameConnectionCS.Token)
}
inline std::string* TwGameConnectionCS::mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Game.TwGameConnectionCS.Token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TwGameConnectionCS::release_token() {
  // @@protoc_insertion_point(field_release:Game.TwGameConnectionCS.Token)
  if (!has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TwGameConnectionCS::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Game.TwGameConnectionCS.Token)
}

// -------------------------------------------------------------------

// TwGameConnectionSC

// required uint64 UserId = 1;
inline bool TwGameConnectionSC::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TwGameConnectionSC::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TwGameConnectionSC::userid() const {
  // @@protoc_insertion_point(field_get:Game.TwGameConnectionSC.UserId)
  return userid_;
}
inline void TwGameConnectionSC::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  userid_ = value;
  // @@protoc_insertion_point(field_set:Game.TwGameConnectionSC.UserId)
}

// required uint32 MapId = 2;
inline bool TwGameConnectionSC::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TwGameConnectionSC::clear_mapid() {
  mapid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TwGameConnectionSC::mapid() const {
  // @@protoc_insertion_point(field_get:Game.TwGameConnectionSC.MapId)
  return mapid_;
}
inline void TwGameConnectionSC::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Game.TwGameConnectionSC.MapId)
}

// required uint32 HeroTypeId = 3;
inline bool TwGameConnectionSC::has_herotypeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TwGameConnectionSC::clear_herotypeid() {
  herotypeid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TwGameConnectionSC::herotypeid() const {
  // @@protoc_insertion_point(field_get:Game.TwGameConnectionSC.HeroTypeId)
  return herotypeid_;
}
inline void TwGameConnectionSC::set_herotypeid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  herotypeid_ = value;
  // @@protoc_insertion_point(field_set:Game.TwGameConnectionSC.HeroTypeId)
}

// -------------------------------------------------------------------

// TwGameHeroMoveCS

// optional uint32 PosX = 1;
inline bool TwGameHeroMoveCS::has_posx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TwGameHeroMoveCS::clear_posx() {
  posx_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TwGameHeroMoveCS::posx() const {
  // @@protoc_insertion_point(field_get:Game.TwGameHeroMoveCS.PosX)
  return posx_;
}
inline void TwGameHeroMoveCS::set_posx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  posx_ = value;
  // @@protoc_insertion_point(field_set:Game.TwGameHeroMoveCS.PosX)
}

// optional uint32 PosY = 2;
inline bool TwGameHeroMoveCS::has_posy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TwGameHeroMoveCS::clear_posy() {
  posy_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TwGameHeroMoveCS::posy() const {
  // @@protoc_insertion_point(field_get:Game.TwGameHeroMoveCS.PosY)
  return posy_;
}
inline void TwGameHeroMoveCS::set_posy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  posy_ = value;
  // @@protoc_insertion_point(field_set:Game.TwGameHeroMoveCS.PosY)
}

// optional float Direction = 3;
inline bool TwGameHeroMoveCS::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TwGameHeroMoveCS::clear_direction() {
  direction_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TwGameHeroMoveCS::direction() const {
  // @@protoc_insertion_point(field_get:Game.TwGameHeroMoveCS.Direction)
  return direction_;
}
inline void TwGameHeroMoveCS::set_direction(float value) {
  _has_bits_[0] |= 0x00000004u;
  direction_ = value;
  // @@protoc_insertion_point(field_set:Game.TwGameHeroMoveCS.Direction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Game

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Game::TwGameCommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::TwGameCommandType>() {
  return ::Game::TwGameCommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameCommand_2eproto
